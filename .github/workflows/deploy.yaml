name: Auto Deploy Flask Web App

on:
  pull_request:
    types: [closed]

env:
  AWS_REGION: ap-southeast-1
  S3_FILE_PATH: tf_output.txt

jobs:
  deploy:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest

    steps:
      - name: Determine Deployment Environment
        id: env
        run: |
          BASE=${{ github.base_ref }}
          HEAD=${{ github.head_ref }}

          echo "Base branch: $BASE"
          echo "Head branch: $HEAD"

          if [[ "$BASE" == "dev" && ( "$HEAD" == feature-* || "$HEAD" == bug-* ) ]]; then
            echo "env=dev" >> $GITHUB_OUTPUT
          elif [[ "$BASE" == "staging" && "$HEAD" == "dev" ]]; then
            echo "env=staging" >> $GITHUB_OUTPUT
          elif [[ "$BASE" == "main" && "$HEAD" == "staging" ]]; then
            echo "env=production" >> $GITHUB_OUTPUT
          else
            echo "No deployment required for this branch combination."
          echo "env=skip" >> $GITHUB_OUTPUT
          fi

      - name: Skip if no deployment needed
        if: steps.env.outputs.env == 'skip'
        run: echo "Skipping deployment."

      - name: Checkout Repository
        if: steps.env.outputs.env != 'skip'
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        if: steps.env.outputs.env != 'skip'
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Download Terraform Outputs from S3
        if: steps.env.outputs.env != 'skip'
        run: |
          S3_PATH="${{ vars.OUTPUT_PATH }}/${{ steps.env.outputs.env }}/tf_output"
          aws s3 cp s3://${{ vars.S3_BUCKET }}/${S3_PATH} ${{ env.S3_FILE_PATH }}
          ls -lah

      - name: Extract Terraform Outputs
        if: steps.env.outputs.env != 'skip'
        run: |
          grep ' = ' ${{ env.S3_FILE_PATH }} | grep -v '::debug::' | grep -v 'command' | grep -v 'exitcode' | grep -v 'stderr' > cleaned_tf_outputs.txt

          ECS_CLUSTER=$(awk -F ' = ' '/ecs_cluster_name/ {print $2}' cleaned_tf_outputs.txt | tr -d '"')
          TASK_DEF=$(awk -F ' = ' '/ecs_task_family/ {print $2}' cleaned_tf_outputs.txt | tr -d '"')
          ECS_SERVICE=$(awk -F ' = ' '/ecs_service_name/ {print $2}' cleaned_tf_outputs.txt | tr -d '"')
          CONTAINER_NAME=$(awk -F ' = ' '/container_name/ {print $2}' cleaned_tf_outputs.txt | tr -d '"')
          DYNAMODB_TABLE=$(awk -F ' = ' '/dynamodb_table_name/ {print $2}' cleaned_tf_outputs.txt | tr -d '"')
          ECR_REPOSITORY=$(awk -F ' = ' '/ecr_repository/ {print $2}' cleaned_tf_outputs.txt | tr -d '"')

          echo "ECS_CLUSTER=$ECS_CLUSTER" >> $GITHUB_ENV
          echo "TASK_DEF=$TASK_DEF" >> $GITHUB_ENV
          echo "ECS_SERVICE=$ECS_SERVICE" >> $GITHUB_ENV
          echo "CONTAINER_NAME=$CONTAINER_NAME" >> $GITHUB_ENV
          echo "DYNAMODB_TABLE=$DYNAMODB_TABLE" >> $GITHUB_ENV
          echo "ECR_REPOSITORY=$ECR_REPOSITORY" >> $GITHUB_ENV

      - name: Login to Amazon ECR
        if: steps.env.outputs.env != 'skip'
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Set up Docker Buildx
        if: steps.env.outputs.env != 'skip'
        uses: docker/setup-buildx-action@v2

      - name: Build and Push Docker Image to Amazon ECR
        if: steps.env.outputs.env != 'skip'
        id: build-image
        uses: docker/build-push-action@v6
        with:
          context: ./flask-webapp-service
          push: true
          tags: |
            ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}
            ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ steps.env.outputs.env }}
          platforms: linux/amd64
          provenance: false

      - name: Download Task Definition
        if: steps.env.outputs.env != 'skip'
        run: |
          aws ecs describe-task-definition --task-definition $TASK_DEF --query taskDefinition > task-definition.json

      - name: Validate Task Definition
        if: steps.env.outputs.env != 'skip'
        run: |
          CONTAINER_FOUND=$(jq '.containerDefinitions[] | select(.name == "${{ env.CONTAINER_NAME }}")' task-definition.json)
          if [[ -z "$CONTAINER_FOUND" ]]; then
            echo "Error: Container '${{ env.CONTAINER_NAME }}' not found!"
            exit 1
          fi

      - name: Update ECS Task Definition with New Image
        if: steps.env.outputs.env != 'skip'
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ steps.env.outputs.env }}
          environment-variables: |
            DYNAMODB_TABLE=${{ env.DYNAMODB_TABLE }}

      - name: Deploy Amazon ECS Task Definition
        if: steps.env.outputs.env != 'skip'
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true

      - name: Scale Up ECS Service
        if: steps.env.outputs.env != 'skip'
        run: |
          aws ecs update-service --cluster ${{ env.ECS_CLUSTER }} --service ${{ env.ECS_SERVICE }} --desired-count 1
